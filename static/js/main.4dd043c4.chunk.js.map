{"version":3,"sources":["icons/arrow.svg","icons/logo.svg","icons/house.svg","styles/global.ts","constants/colors.ts","constants/media.ts","constants/months.ts","styles/theme.ts","components/Card/Container.tsx","components/Card/Icon.tsx","components/Card/Title.tsx","components/Card/Subtitle.tsx","components/Card/index.tsx","components/InputField/Label.tsx","components/InputField/InputWrapper.tsx","components/InputField/MonthPicker/ArrowIcon.tsx","components/InputField/MonthPicker/Button.tsx","components/InputField/MonthPicker/Wrapper.tsx","components/InputField/MonthPicker/index.tsx","components/InputField/Input.tsx","components/InputField/Symbol.tsx","components/InputField/index.tsx","components/Header/Container.tsx","components/Header/Logo.tsx","components/Header/index.tsx","screens/SavingGoal/components/GoalSummary.tsx","screens/SavingGoal/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","createGlobalStyle","theme","backgroundColor","fontFamily","colors","almostBlack","prettyGray","gray","blueishGray","blue","darkBlue","deviceSizes","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","media","Object","keys","reduce","device","index","values","months","Container","styled","header","Icon","img","Title","div","Subtitle","Card","props","icon","src","title","subtitle","children","Label","InputWrapper","ArrowIcon","className","alt","Button","button","Wrapper","ArrowIconRight","Value","Year","span","MonthPicker","value","Date","toJSON","min","onChange","selectedDate","selectedMonth","getMonth","selectedYear","getFullYear","minDate","disablePrev","React","month","setMonth","changeMonth","quantity","date","parsedDate","tabIndex","onKeyDown","event","keyCode","disabled","onClick","Input","input","displayName","Symbol","InputField","label","symbol","type","mask","max","onInput","autoFocus","inputValue","setValue","maxValue","parseInt","notNumber","currentValue","target","intValue","toString","replace","formattedValue","isNaN","Logo","Header","OriginLogo","MonthlyInfo","Summary","amount","today","dateGoal","perMonth","Math","ceil","monthsList","year","everyThreeDigits","formattedPerMonth","formattedAmount","Display","p","Fields","TotalAmountInput","GoalMonthInput","ConfirmButtonContainer","ConfirmButton","SavingGoalScreen","totalAmount","setTotalAmount","monthGoal","setMonthGoal","HouseIcon","GoalSummary","App","SavingGoal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4dd043c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.6a23a8a6.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c84bf198.svg\";","module.exports = __webpack_public_path__ + \"static/media/house.889409ea.svg\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *, *::before, *::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.backgroundColor};\r\n    font-family: ${({ theme }) => theme.fontFamily};\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","const colors = {\r\n  almostBlack: '#1C1E1F',\r\n  prettyGray: '#657786',\r\n  gray: '#E1E8ED',\r\n  blueishGray: '#F4F8FA',\r\n  blue: '#0079FF',\r\n  darkBlue: '#1B31A8'\r\n};\r\n\r\nexport default colors;\r\n","interface DeviceSizes {\r\n  mobileS?: string;\r\n  mobileM?: string;\r\n  mobileL?: string;\r\n  tablet?: string;\r\n  laptop?: string;\r\n  laptopL?: string;\r\n  desktop?: string;\r\n}\r\n\r\nconst deviceSizes: DeviceSizes = {\r\n  mobileS: '320px',\r\n  mobileM: '375px',\r\n  mobileL: '425px',\r\n  tablet: '768px',\r\n  laptop: '1024px',\r\n  laptopL: '1440px',\r\n  desktop: '2560px'\r\n};\r\n\r\nconst media: DeviceSizes = Object.keys(deviceSizes).reduce(\r\n  (media: object, device: string, index: number) => ({\r\n    ...media,\r\n    [device]: `@media(min-width: ${Object.values(deviceSizes)[index]})`\r\n  }),\r\n  {}\r\n);\r\n\r\nexport default media;\r\n","export const months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\n\r\nexport default months;\r\n","import { colors } from '../constants';\r\n\r\nconst theme = {\r\n  fontFamily: 'Work Sans, sans-serif',\r\n  backgroundColor: colors.blueishGray\r\n};\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport { colors, media } from '../../constants';\r\n\r\nconst Container = styled.header`\r\n  background-color: white;\r\n  padding: 28px 24px;\r\n  border-radius: 16px 16px 0 0;\r\n  box-shadow: 0 2px 16px rgba(225, 232, 237, 0.8);\r\n  margin: 0 auto;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      padding: 39px 40px 49px;\r\n      border-radius: 8px;\r\n      box-shadow: 0px 1px 4px rgba(150, 164, 176, 0.1);\r\n      border: 1px solid ${colors.gray};\r\n      width: 560px;\r\n      margin: 0 auto 32px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\nimport { media } from '../../constants';\r\n\r\nconst Icon = styled.img`\r\n  margin-bottom: 4px;\r\n  height: 32px;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      height: 40px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Icon;\r\n","import styled from 'styled-components';\r\nimport { colors, media } from '../../constants';\r\n\r\nconst Title = styled.div`\r\n  color: ${colors.almostBlack};\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 32px;\r\n  letter-spacing: -0.2px;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      font-weight: 600;\r\n      font-size: 32px;\r\n      line-height: 40px;\r\n      letter-spacing: -0.266667px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\nimport { colors, media } from '../../constants';\r\n\r\nconst Subtitle = styled.div`\r\n  color: ${colors.prettyGray};\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  margin-bottom: 36px;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      font-size: 16px;\r\n      line-height: 20px;\r\n      margin-bottom: 40px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Subtitle;\r\n","import * as React from 'react';\r\nimport Container from './Container';\r\nimport Icon from './Icon';\r\nimport Title from './Title';\r\nimport Subtitle from './Subtitle';\r\n\r\ninterface Props {\r\n  title: string;\r\n  subtitle: string;\r\n  icon?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Card: React.FunctionComponent<Props> = props => {\r\n  return (\r\n    <Container>\r\n      {props.icon && <Icon src={props.icon} />}\r\n      {props.title && <Title>{props.title}</Title>}\r\n      {props.subtitle && <Subtitle>{props.subtitle}</Subtitle>}\r\n      {props.children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nconst Label = styled.div`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  margin-bottom: 4px;\r\n`;\r\n\r\nexport default Label;\r\n","import styled from 'styled-components';\r\nimport { colors } from '../../constants';\r\n\r\nconst InputWrapper = styled.div`\r\n  display: flex;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n  height: 56px;\r\n  border: 1px solid ${colors.gray};\r\n  align-items: stretch;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default InputWrapper;\r\n","import * as React from 'react';\nimport Icon from '../../../icons/arrow.svg';\n\ninterface Props {\n  className?: string;\n}\n\nconst ArrowIcon: React.FunctionComponent<Props> = ({ className }) => (\n  <img src={Icon} alt=\"<\" className={className} />\n);\n\nexport default ArrowIcon;\n","import styled from 'styled-components';\r\nimport { colors } from '../../../constants';\r\n\r\nconst Button = styled.button`\r\n  flex: none;\r\n  display: flex;\r\n  height: 100%;\r\n  width: 47px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-right: 1px solid ${colors.gray};\r\n  background-color: ${colors.gray};\r\n  transition: 100ms ease-in-out;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  &:not([disabled]):hover {\r\n    border-color: ${colors.blueishGray};\r\n    background-color: ${colors.blueishGray};\r\n  }\r\n\r\n  &:not([disabled]):active {\r\n    border-color: ${colors.gray};\r\n    background-color: ${colors.gray};\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  height: 100%;\r\n`;\r\n\r\nexport default Wrapper;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArrowIcon from './ArrowIcon';\r\nimport Button from './Button';\r\nimport Wrapper from './Wrapper';\r\nimport { months } from '../../../constants';\r\n\r\nconst ArrowIconRight = styled(ArrowIcon)`\r\n  transform: rotate(180deg);\r\n`;\r\n\r\nconst Value = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  font-weight: 600;\r\n  font-family: ${({ theme }) => theme.fontFamily};\r\n  font-size: 20px;\r\n  height: 100%;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n`;\r\n\r\ninterface Props {\r\n  min?: string;\r\n  value?: string;\r\n  onChange?: Function;\r\n}\r\n\r\nconst MonthPicker: React.FunctionComponent<Props> = ({\r\n  value = new Date().toJSON(),\r\n  min,\r\n  onChange\r\n}) => {\r\n  const selectedDate = new Date(value);\r\n  const selectedMonth = selectedDate.getMonth();\r\n  const selectedYear = selectedDate.getFullYear();\r\n  const minDate = min && new Date(min);\r\n  const disablePrev =\r\n    minDate &&\r\n    selectedMonth <= minDate.getMonth() &&\r\n    selectedYear <= minDate.getFullYear();\r\n\r\n  const [month, setMonth] = React.useState(value);\r\n  const changeMonth = (quantity: number) => {\r\n    const date = new Date(month);\r\n    date.setMonth(date.getMonth() + quantity);\r\n    const parsedDate = date.toJSON();\r\n    setMonth(parsedDate);\r\n    onChange && onChange(parsedDate);\r\n  };\r\n\r\n  const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (event.keyCode === 37 && !disablePrev) {\r\n      changeMonth(-1);\r\n    }\r\n    if (event.keyCode === 39) {\r\n      changeMonth(1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper tabIndex={0} onKeyDown={onKeyDown}>\r\n      <Button disabled={disablePrev} onClick={() => changeMonth(-1)}>\r\n        <ArrowIcon />\r\n      </Button>\r\n      <Value>\r\n        <span>{months[selectedMonth]}</span>\r\n        <Year>{selectedYear}</Year>\r\n      </Value>\r\n      <Button onClick={() => changeMonth(1)}>\r\n        <ArrowIconRight />\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MonthPicker;\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  flex: 1;\r\n  font-weight: 600;\r\n  font-family: ${({ theme }) => theme.fontFamily};\r\n  font-size: 20px;\r\n  padding-left: 16px;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nInput.displayName = 'Input';\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\nimport { colors } from '../../constants';\r\n\r\nconst Symbol = styled.div`\r\n  display: flex;\r\n  flex: none;\r\n  font-weight: normal;\r\n  font-family: ${({ theme }) => theme.fontFamily};\r\n  font-size: 22px;\r\n  height: 100%;\r\n  width: 55px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-right: 1px solid ${colors.gray};\r\n  background-color: ${colors.blueishGray};\r\n  color: ${colors.prettyGray};\r\n`;\r\n\r\nexport default Symbol;\r\n","import * as React from 'react';\r\nimport Label from './Label';\r\nimport InputWrapper from './InputWrapper';\r\nimport MonthPicker from './MonthPicker';\r\nimport Input from './Input';\r\nimport Symbol from './Symbol';\r\n\r\ninterface Props {\r\n  className?: string;\r\n  label?: string;\r\n  symbol?: React.ReactChild;\r\n  type?: string;\r\n  value?: string;\r\n  mask?: string;\r\n  min?: string;\r\n  max?: string;\r\n  onChange?: Function;\r\n  onInput?: Function;\r\n  autoFocus?: boolean;\r\n}\r\n\r\nconst InputField: React.FunctionComponent<Props> = ({\r\n  className,\r\n  label,\r\n  symbol,\r\n  type,\r\n  value = '',\r\n  mask,\r\n  min,\r\n  max = '',\r\n  onChange,\r\n  onInput,\r\n  autoFocus\r\n}: Props) => {\r\n  const [inputValue, setValue] = React.useState(value);\r\n  return (\r\n    <div className={className}>\r\n      <Label>{label}</Label>\r\n      <InputWrapper>\r\n        {symbol && <Symbol>{symbol}</Symbol>}\r\n        {type === 'monthPicker' ? (\r\n          <MonthPicker min={min} value={value} onChange={onChange} />\r\n        ) : (\r\n          <Input\r\n            autoFocus={autoFocus}\r\n            type={type}\r\n            value={inputValue}\r\n            max={max}\r\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n              onChange && onChange(event)\r\n            }\r\n            onInput={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n              if (mask === 'currency') {\r\n                const maxValue = parseInt(max);\r\n                const notNumber = /[^0-9]/g;\r\n                const everyThreeDigits = /(\\d)(?=(\\d{3})+(?!\\d))/g;\r\n                const currentValue = event.target.value;\r\n\r\n                if (!currentValue) {\r\n                  setValue('');\r\n                  event.target.value = '';\r\n                } else {\r\n                  const intValue = parseInt(\r\n                    currentValue.toString().replace(notNumber, '')\r\n                  );\r\n                  if (\r\n                    !(\r\n                      maxValue &&\r\n                      typeof intValue === 'number' &&\r\n                      intValue > maxValue\r\n                    )\r\n                  ) {\r\n                    const formattedValue = intValue\r\n                      .toString()\r\n                      .replace(everyThreeDigits, '$1,');\r\n                    if (isNaN(intValue)) {\r\n                      setValue('');\r\n                      event.target.value = '';\r\n                    } else {\r\n                      setValue(formattedValue);\r\n                      event.target.value = intValue.toString();\r\n                    }\r\n                  } else {\r\n                    event.target.value = inputValue.replace(notNumber, '');\r\n                  }\r\n                }\r\n              }\r\n              onInput && onInput(event);\r\n            }}\r\n          />\r\n        )}\r\n      </InputWrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import styled from 'styled-components';\r\nimport { media } from '../../constants';\r\n\r\nconst Container = styled.header`\r\n  position: sticky;\r\n  background-color: white;\r\n  height: 56px;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      height: 79px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\nimport { media } from '../../constants';\r\n\r\nconst Logo = styled.img`\r\n  margin-top: 20px;\r\n  margin-left: 16px;\r\n  height: 22px;\r\n\r\n  ${media.tablet} {\r\n    & {\r\n      margin-top: 29px;\r\n      margin-left: 37px;\r\n      height: 30px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Logo;\r\n","import * as React from 'react';\nimport Container from './Container';\nimport Logo from './Logo';\nimport OriginLogo from '../../icons/logo.svg';\n\nconst Header: React.FunctionComponent = () => {\n  return (\n    <Container>\n      <Logo src={OriginLogo} alt=\"Origin\" />\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors, media, months as monthsList } from '../../../constants';\r\n\r\nconst Container = styled.div`\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  margin: 0 auto;\r\n  border: 1px solid ${colors.gray};\r\n  overflow: hidden;\r\n`;\r\n\r\nconst MonthlyInfo = styled.div`\r\n  height: 64px;\r\n  padding: 0 24px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${media.tablet} {\r\n    height: 102px;\r\n    padding: 0 32px;\r\n  }\r\n`;\r\n\r\nconst Label = styled.span`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  margin-right: auto;\r\n\r\n  ${media.tablet} {\r\n    font-size: 18px;\r\n    line-height: 24px;\r\n  }\r\n`;\r\n\r\nconst Value = styled.span`\r\n  color: ${colors.blue};\r\n  font-weight: 500;\r\n  font-size: 26px;\r\n  line-height: 32px;\r\n  letter-spacing: -0.216667px;\r\n\r\n  ${media.tablet} {\r\n    font-size: 40px;\r\n    line-height: 32px;\r\n  }\r\n`;\r\n\r\nconst Summary = styled.div`\r\n  background-color: ${colors.blueishGray};\r\n  padding: 0 24px;\r\n  font-weight: normal;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  padding: 16px 24px 22px;\r\n\r\n  ${media.tablet} {\r\n    padding: 16px 32px;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  amount: number;\r\n  date: string;\r\n}\r\n\r\nconst Card: React.FunctionComponent<Props> = ({ amount, date }) => {\r\n  const today = new Date();\r\n  const dateGoal = new Date(date);\r\n  const months =\r\n    (dateGoal.getFullYear() - today.getFullYear()) * 12 -\r\n    today.getMonth() +\r\n    dateGoal.getMonth() +\r\n    1;\r\n\r\n  const perMonth = Math.ceil(amount / months);\r\n  const selectedMonth = dateGoal && dateGoal.getMonth();\r\n  const month = monthsList[selectedMonth];\r\n  const year = dateGoal && dateGoal.getFullYear();\r\n  const everyThreeDigits = /(\\d)(?=(\\d{3})+(?!\\d))/g;\r\n  const formattedPerMonth = perMonth\r\n    .toString()\r\n    .replace(everyThreeDigits, '$1,');\r\n  const formattedAmount = amount.toString().replace(everyThreeDigits, '$1,');\r\n\r\n  return (\r\n    <Container>\r\n      <MonthlyInfo>\r\n        <Label>Monthly amount</Label>\r\n        <Value>${formattedPerMonth}</Value>\r\n      </MonthlyInfo>\r\n      <Summary>\r\n        <span>\r\n          You’re planning\r\n          <strong>\r\n            {` ${months} monthly deposit${months > 1 ? 's' : ''} `}\r\n          </strong>\r\n          to reach your <strong>{`$${formattedAmount} `}</strong>\r\n          goal by <strong>{`${month} ${year}.`}</strong>\r\n        </span>\r\n      </Summary>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Card, InputField } from '../../components';\nimport { media, colors } from '../../constants';\nimport HouseIcon from '../../icons/house.svg';\nimport GoalSummary from './components/GoalSummary';\n\nconst Display = styled.p`\n  color: ${colors.darkBlue};\n  text-align: center;\n  font-weight: normal;\n  letter-spacing: -0.225px;\n  font-size: 18px;\n  line-height: 26px;\n  margin-top: 23px;\n  margin-bottom: 24px;\n\n  ${media.tablet} {\n    & {\n      font-size: 24px;\n      line-height: 32px;\n      margin-top: 54px;\n      margin-bottom: 40px;\n    }\n  }\n`;\n\nconst Fields = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${media.tablet} {\n    flex-direction: row;\n  }\n`;\n\nconst TotalAmountInput = styled(InputField)`\n  flex: 0 1 50%;\n  margin-bottom: 16px;\n`;\n\nTotalAmountInput.displayName = 'TotalAmountInput';\n\nconst GoalMonthInput = styled(InputField)`\n  flex: 0 1 50%;\n  margin-bottom: 16px;\n\n  ${media.tablet} {\n    margin-left: 17px;\n  }\n`;\n\nconst ConfirmButtonContainer = styled.div`\n  margin: 0 -8px;\n`;\n\nconst ConfirmButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 56px;\n  background-color: ${colors.darkBlue};\n  width: 100%;\n  max-width: 400px;\n  margin: 36px auto 16px;\n  left: -8px;\n  right: -8px;\n  color: white;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 24px;\n  border-radius: 28px;\n  transition: 100ms ease-in-out;\n\n  &:hover,\n  &:active {\n    background-color: ${colors.blue};\n  }\n\n  ${media.tablet} {\n    & {\n      margin: 31px auto 0;\n    }\n  }\n`;\n\nconst SavingGoalScreen: React.FunctionComponent = () => {\n  const [totalAmount, setTotalAmount] = React.useState('0');\n  const [monthGoal, setMonthGoal] = React.useState(new Date().toJSON());\n  const handleAmountInput = ({ target: { value } }) => setTotalAmount(value);\n\n  return (\n    <>\n      <Display>\n        {\"Let's plan your \"}\n        <strong>saving goal.</strong>\n      </Display>\n      <Card title=\"Buy a house\" subtitle=\"Saving goal\" icon={HouseIcon}>\n        <Fields>\n          <TotalAmountInput\n            label=\"Total amount\"\n            symbol=\"$\"\n            type=\"text\"\n            mask=\"currency\"\n            max=\"9999999999\"\n            value={totalAmount}\n            onInput={handleAmountInput}\n            autoFocus\n          />\n          <GoalMonthInput\n            label=\"Reach goal by\"\n            type=\"monthPicker\"\n            min={new Date().toJSON()}\n            value={monthGoal}\n            onChange={setMonthGoal}\n          />\n        </Fields>\n        <GoalSummary amount={parseInt(totalAmount) || 0} date={monthGoal} />\n        <ConfirmButtonContainer>\n          <ConfirmButton>Confirm</ConfirmButton>\n        </ConfirmButtonContainer>\n      </Card>\n    </>\n  );\n};\n\nexport default SavingGoalScreen;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle, theme } from './styles';\nimport { Header } from './components';\nimport { SavingGoalScreen } from './screens';\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Header />\n      <SavingGoalScreen />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}